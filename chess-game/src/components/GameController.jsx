import React from "react";
import Board from "./Board";

const INITIAL_GAME_STATE = {
  "00": "xe_r",
  10: "ma_r",
  20: "tinh_r",
  30: "sy_r",
  40: "tuong_r",
  50: "sy_r",
  60: "tinh_r",
  70: "ma_r",
  80: "xe_r",
  12: "phao_r",
  72: "phao_r",
  "03": "tot_r",
  23: "tot_r",
  43: "tot_r",
  63: "tot_r",
  83: "tot_r",
  "06": "tot_b",
  26: "tot_b",
  46: "tot_b",
  66: "tot_b",
  86: "tot_b",
  17: "phao_b",
  77: "phao_b",
  "09": "xe_b",
  19: "ma_b",
  29: "tinh_b",
  39: "sy_b",
  49: "tuong_b",
  59: "sy_b",
  69: "tinh_b",
  79: "ma_b",
  89: "xe_b",
};

class GameController extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      gameState: { ...INITIAL_GAME_STATE }, // L∆∞u tr·∫°ng th√°i b√†n c·ªù
      selectedPiece: null, // L∆∞u qu√¢n c·ªù ƒëang ƒë∆∞·ª£c ch·ªçn
    };
  }

  handlePieceClick = (position) => {
    const { selectedPiece, gameState } = this.state;
    const key = `${position.col}${position.row}`;

    if (selectedPiece) {
      // N·∫øu ƒë√£ ch·ªçn qu√¢n c·ªù tr∆∞·ªõc ƒë√≥, th·ª≠ di chuy·ªÉn
      this.movePiece(selectedPiece, position);
    } else if (gameState[key]) {
      // N·∫øu √¥ c√≥ qu√¢n c·ªù, ch·ªçn n√≥
      this.setState({ selectedPiece: position });
    }
  };

  movePiece = (from, to) => {
    const { gameState } = this.state;
    const fromKey = `${from.col}${from.row}`;
    const toKey = `${to.col}${to.row}`;

    if (!gameState[fromKey]) return;

    // Ki·ªÉm tra n∆∞·ªõc ƒëi h·ª£p l·ªá
    const movingPiece = gameState[fromKey];
    const targetPiece = gameState[toKey];

    // üöÄ Ki·ªÉm tra xem qu√¢n c·ªù ƒë√≠ch c√≥ ph·∫£i l√† qu√¢n ƒë·ªëi ph∆∞∆°ng kh√¥ng
    if (targetPiece && movingPiece[3] === targetPiece[3]) {
      return;
    }

    const newGameState = { ...gameState };
    if (targetPiece) {
      console.log(`Captured: ${targetPiece}`); // Debug ƒë·ªÉ xem c√≥ ƒÉn ƒë∆∞·ª£c qu√¢n kh√¥ng
      delete newGameState[toKey]; // X√≥a qu√¢n c·ªù b·ªã ƒÉn
    }
    newGameState[toKey] = movingPiece; // ƒê·∫∑t qu√¢n c·ªù v√†o v·ªã tr√≠ m·ªõi
    delete newGameState[fromKey]; // X√≥a v·ªã tr√≠ c

    this.setState({ gameState: newGameState, selectedPiece: null });
  };

  getValidMoves = (position) => {
    const { gameState } = this.state;
    const { row, col } = position;
    const key = `${col}${row}`;
    const piece = gameState[key];

    if (!piece) return []; // N·∫øu kh√¥ng c√≥ qu√¢n c·ªù, kh√¥ng c√≥ n∆∞·ªõc ƒëi

    const moves = [];
    const direction = piece.includes("_r") ? 1 : -1;

    // V√≠ d·ª•: n·∫øu l√† t·ªët (tot_r ho·∫∑c tot_b)
    const newRow = row + direction;
    const newKey = `${col}${newRow}`;
    if (!gameState[newKey]) {
      moves.push({ row: newRow, col });
    }

    // ‚úÖ Ki·ªÉm tra hai √¥ ch√©o ƒë·ªÉ ƒÉn qu√¢n ƒë·ªëi ph∆∞∆°ng
    [col - 1, col + 1].forEach((newCol) => {
      const attackKey = `${newCol}${newRow}`;
      if (
        gameState[attackKey] &&
        gameState[attackKey].split("_")[1] !== piece.split("_")[1]
      ) {
        moves.push({ row: newRow, col: newCol });
      }
    });

    return moves; // Tr·∫£ v·ªÅ danh s√°ch n∆∞·ªõc ƒëi h·ª£p l·ªá
  };

  render() {
    return (
      <div className="flex flex-col items-center mt-10">
        <Board
          gameState={this.state.gameState}
          setGameState={(newGameState) =>
            this.setState({ gameState: newGameState })
          }
          getValidMoves={this.getValidMoves} // ‚úÖ Truy·ªÅn h√†m xu·ªëng Board.jsx
        />
      </div>
    );
  }
}

export default GameController;
