package com.btec.quanlykhohang_api.websocket;

import com.btec.quanlykhohang_api.dtos.ChatMessage;
import com.btec.quanlykhohang_api.dtos.JoinRequest;
import com.btec.quanlykhohang_api.dtos.PlayerJoinResponse;
import com.btec.quanlykhohang_api.entities.Game;
import com.btec.quanlykhohang_api.entities.Move;
import com.btec.quanlykhohang_api.entities.Player;
import com.btec.quanlykhohang_api.repositories.GameRepository;
import com.btec.quanlykhohang_api.repositories.MoveRepository;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Controller
public class GameWebSocketController {
    private final SimpMessagingTemplate messagingTemplate;
    private final MoveRepository moveRepository;

    @Autowired
    private GameRepository gameRepository;

    // Map<roomId, Set<playerId>>
    private final Map<String, Set<String>> roomReadyMap = new HashMap<>();
    private final Map<String, List<Player>> playersByRoom = new ConcurrentHashMap<>();

    public GameWebSocketController(SimpMessagingTemplate messagingTemplate, MoveRepository moveRepository) {
        this.messagingTemplate = messagingTemplate;
        this.moveRepository = moveRepository;
    }

    // G·ª≠i n∆∞·ªõc ƒëi t·ªõi t·∫•t c·∫£ ng∆∞·ªùi ch∆°i trong ph√≤ng
    @MessageMapping("/move/{roomId}")
    public void handleMove(@DestinationVariable String roomId, Move move) {
        move.setRoomId(roomId); // ƒë·∫£m b·∫£o roomId c√≥ trong move
        moveRepository.save(move); // üëâ L∆∞u v√†o MongoDB

        messagingTemplate.convertAndSend("/topic/" + roomId, move);
    }

    // Ng∆∞·ªùi ch∆°i g·ª≠i tr·∫°ng th√°i Ready
    @MessageMapping("/ready/{roomId}/{playerId}")
    public void handleReadyState(
            @DestinationVariable String roomId,
            @DestinationVariable String playerId
    ) {
        roomReadyMap.putIfAbsent(roomId, new HashSet<>());
        Set<String> readyPlayers = roomReadyMap.get(roomId);

        if (readyPlayers.contains(playerId)) {
            readyPlayers.remove(playerId); // toggle off
        } else {
            readyPlayers.add(playerId); // toggle on
        }

        boolean allReady = readyPlayers.size() >= 2;

        // üîÅ G·ª≠i tr·∫°ng th√°i m·ªõi cho t·∫•t c·∫£ ng∆∞·ªùi trong ph√≤ng
        messagingTemplate.convertAndSend("/topic/ready/" + roomId,
                new GameStatus(roomId, allReady ? "START" : "WAITING", new ArrayList<>(readyPlayers)));
    }

    @MessageMapping("/chat/{roomId}")
    public void handleChat(@DestinationVariable String roomId, ChatMessage message) {
        message.setGameId(roomId);
        messagingTemplate.convertAndSend("/topic/chat/" + roomId, message);
    }

    @MessageMapping("/join/{gameId}")
    @SendTo("/topic/players/{gameId}")
    public PlayerJoinResponse handlePlayerJoin(@DestinationVariable String gameId, JoinRequest request) {
        String playerId = request.getPlayerId();
        System.out.println("WebSocket JOIN_ROOM: gameId=" + gameId + ", playerId=" + playerId);

        // L·∫•y th√¥ng tin game t·ª´ database
        Optional<Game> optionalGame = gameRepository.findById(gameId);
        if (optionalGame.isEmpty()) {
            System.out.println("Game not found: " + gameId);

            // N·∫øu game kh√¥ng t·ªìn t·∫°i, t·∫°o game m·ªõi
            try {
                Game newGame = new Game();
                newGame.setId(gameId);
                newGame.setPlayer1(playerId);
                newGame.setStatus("WAITING");
                newGame = gameRepository.save(newGame);
                System.out.println("Created new game: " + newGame.getId());

                // T·∫°o danh s√°ch ng∆∞·ªùi ch∆°i m·ªõi
                List<Player> players = new ArrayList<>();
                Player newPlayer = new Player(playerId, "r"); // Ng∆∞·ªùi ch∆°i ƒë·∫ßu ti√™n l√† qu√¢n ƒë·ªè
                players.add(newPlayer);
                playersByRoom.put(gameId, players);

                return new PlayerJoinResponse(players);
            } catch (Exception e) {
                System.err.println("Error creating game: " + e.getMessage());
                return new PlayerJoinResponse(new ArrayList<>());
            }
        }
        Game game = optionalGame.get();
        System.out.println("Game found: " + game.getId() + ", player1=" + game.getPlayer1() + ", player2=" + game.getPlayer2());

        // L·∫•y danh s√°ch ng∆∞·ªùi ch∆°i trong ph√≤ng
        List<Player> players = playersByRoom.computeIfAbsent(gameId, k -> new ArrayList<>());

        // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i ƒë√£ t·ªìn t·∫°i trong ph√≤ng ch∆∞a
        Optional<Player> existingPlayer = players.stream()
                .filter(p -> p.getId().equals(playerId))
                .findFirst();

        if (existingPlayer.isPresent()) {
            // Ng∆∞·ªùi ch∆°i ƒë√£ t·ªìn t·∫°i, tr·∫£ v·ªÅ th√¥ng tin hi·ªán t·∫°i
            System.out.println("Player already exists in room: " + playerId);
            return new PlayerJoinResponse(players);
        }

        // X√°c ƒë·ªãnh m√†u qu√¢n d·ª±a tr√™n th√¥ng tin t·ª´ database
        String color = null;

        if (playerId.equals(game.getPlayer1())) {
            color = "r"; // Ng∆∞·ªùi ch∆°i 1 l√† qu√¢n ƒë·ªè
            System.out.println("Assigning RED to player: " + playerId);
        } else if (playerId.equals(game.getPlayer2())) {
            color = "b"; // Ng∆∞·ªùi ch∆°i 2 l√† qu√¢n ƒëen
            System.out.println("Assigning BLACK to player: " + playerId);
        } else {
            // N·∫øu ch∆∞a c√≥ trong database, th√™m v√†o
            if (game.getPlayer1() == null) {
                game.setPlayer1(playerId);
                game.setStatus("WAITING");
                color = "r";
                gameRepository.save(game);
                System.out.println("Added as player1 (RED): " + playerId);
            } else if (game.getPlayer2() == null && !game.getPlayer1().equals(playerId)) {
                game.setPlayer2(playerId);
                game.setStatus("READY");
                color = "b";
                gameRepository.save(game);
                System.out.println("Added as player2 (BLACK): " + playerId);
            } else {
                // Ph√≤ng ƒë√£ ƒë·∫ßy ho·∫∑c l·ªói
                System.out.println("Room full or error");
                return new PlayerJoinResponse(players);
            }
        }

        // Th√™m ng∆∞·ªùi ch∆°i m·ªõi v√†o danh s√°ch
        Player newPlayer = new Player(playerId, color);

        // X√≥a ng∆∞·ªùi ch∆°i c≈© n·∫øu c√≥ (ƒë·ªÉ tr√°nh tr√πng l·∫∑p)
        players.removeIf(p -> p.getId().equals(playerId));

        // Th√™m ng∆∞·ªùi ch∆°i m·ªõi
        players.add(newPlayer);

        System.out.println("Updated players list: " + players.size() + " players");
//        for (Player p : players) {
//            System.out.println("- " + p.getId() + ": " + p.getColor());
//        }

        // L∆∞u l·∫°i v√†o map to√†n c·ª•c
        playersByRoom.put(gameId, players);

        return new PlayerJoinResponse(players);
    }

    // G·ª≠i object tr·∫°ng th√°i game
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class GameStatus {
        private String roomId;
        private String status; // "WAITING" or "START"
        private List<String> readyPlayers; // danh s√°ch ng∆∞·ªùi ƒë√£ ready
    }
}
